@{
    ViewData["Title"] = "Home Page";
}
@model CSI_Media.Models.SortJobViewModel


<div class="container">
    <div class="centered-form" style="max-height: 500px; overflow-y: auto;">
        <h1>Number Sorting</h1>
        <form asp-controller="Home" asp-action="PerformSortJob" method="post">

            <div class="mb-3">
                <label for="numbersInput" class="form-label">Enter numbers separated by commas or spaces:</label>
                <input asp-for="SortJobRequest.Numbers" type="text" class="form-control" id="numbersInput" name="numbers" placeholder="1, 2, 3, 4">
            </div>

            <div class="form-check form-check-inline">
                <input asp-for="SortJobRequest.SortDirection" class="form-check-input" type="radio" id="sortAscending" name="sortDirection" value="Ascending" checked>
                <label class="form-check-label" for="sortAscending">Ascending</label>
            </div>

            <div class="form-check form-check-inline">
                <input asp-for="SortJobRequest.SortDirection" class="form-check-input" type="radio" id="sortDescending" name="sortDirection" value="Descending">
                <label class="form-check-label" for="sortDescending">Descending</label>
            </div>

            <br>

            <button type="submit" class="btn btn-primary mt-3" onclick="validateForm()">Sort</button>

        </form>
        @if (Model != null && Model.SortJobRequest != null)
        {
            <div class="result">
                <h2>Result</h2>
                <p>Sorted List:@Model.SortJobRequest.Numbers</p>
                <p>Sort Direction: @Model.SortJobRequest.SortDirection</p>
            </div>
        }
        else if (ViewBag.Error != null)
        {
            <div class="result">
                <p class="text-danger">@ViewBag.Error</p>
            </div>
        }
        <div class="alert" id="feedback" role="alert"></div>
        <h2>Past Sorts</h2>
        <a href="#" id="exportButton" class="btn btn-secondary mt-3">Export Sorts (JSON)</a>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Sorted Numbers</th>
                        <th>Sort Direction</th>
                        <th>Time Taken</th>
                        <th>Date and Time Sorted</th>
                    </tr>
                </thead>
                <tbody id="pastSorts">
                    @if (Model != null && Model.PastSorts != null)
                    {
                        foreach (var pastSort in Model.PastSorts)
                        {
                            <tr>
                                <td>@pastSort.Numbers</td>
                                <td>@pastSort.SortDirection.ToString()</td>
                                <td>@($"{pastSort.TimeTaken.TotalMilliseconds.ToString("0.###")} ms")</td>
                                <td>@pastSort.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4">No past sorts found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


        
    </div>
    
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<link href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" rel="stylesheet" />

<script>
    $(document).ready(function () {
        $('#pastSortsTable').DataTable();
    });
</script>
<script>
    $(document).ready(function () {
        $('#exportButton').click(function () {
            // Fetch past sorts data from the server
            $.ajax({
                url: '/Home/ExportSortsJson', // Replace with the actual endpoint URL
                type: 'GET',
                success: function (data) {
                    // Convert data to JSON string
                    var jsonData = JSON.stringify(data,null,2);
                    // Create a Blob containing the JSON data
                    var blob = new Blob([jsonData], { type: 'application/json' });
                    // Create a temporary anchor element
                    var a = document.createElement('a');
                    a.href = window.URL.createObjectURL(blob);
                    a.download = 'sorts.json'; // File name
                    // Trigger a click event on the anchor element to initiate download
                    a.click();
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching past sorts data:', error);
                }
            });
        });
    });
</script>
<script>
    
    function validateForm() {
        var messageInput = document.getElementById('numbersInput');
        var message = messageInput.value.trim();
        messageInput.setCustomValidity(''); // Reset custom validity

        var pattern = /^\s*\d+(\s*,\s*\d+)*\s*$/;

        

        if (message === '') {
            messageInput.setCustomValidity('Please enter numbers to sort.');

            return false;
        } else if (!pattern.test(message)) {
            messageInput.setCustomValidity('Numbers  must be comma separated');

            return false;
        } else {
            messageInput.setCustomValidity(''); // Reset custom validity
            return true;
        }
    }
</script>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFOnpD lijXkO1D7BxVV7TtNrBsWrP3E9GUtZstXTzGOeNrZ4N0vcawN++39I" crossorigin="anonymous"></script>
